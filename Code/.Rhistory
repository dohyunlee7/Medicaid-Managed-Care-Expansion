library(dplyr)
library(haven)
library(tidyverse)
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp")
# Read in MAP data for 1997-2021
map_wide_97_01 <- readRDS(paste0(path, "/Temp/map_wide_97_01.rds"))
temp <- readRDS(paste0(path, "/Temp/fmr_1997_2021.rds"))
View(temp)
#' Remove columns with more than X% of missing values
#' @param data the main analytical table
#' @param threshold the threshold of missing values
#' @returns the updated dataframe
remove_high_na_columns <- function(data, threshold = 0.4) {
na_percentage <- colMeans(is.na(data))
data <- data[, na_percentage <= threshold]
return(data)
}
#' Z-score normalize a continuous variable
#' @param x continuous variable
zscore_normalize <- function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
}
# Define paths, load data
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"snap_heterogeneity", "data")
image_path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks",
"Dohyun", "snap_heterogeneity", "images",
"model_metrics")
# Includes just Likely SNAP Eligible people
dd <- read_parquet(paste0(path, "/new_analytical_table_main.parquet"))
# Omit unneeded variables
dd2 <- dd %>%
select(-file_yr,
-cl_au_num,
-au_num,
-edge_id,
-au_prog_cd,
-cl_au_sts_cd,
-cl_au_sts_reas_cd,
-cl_bm_beg_dt,
-au_bm_beg_dt,
-cl_pd_thru_dt,
-au_pd_thru_dt,
-cl_ssn_num,
-cl_race_2_cd,
-cl_race_3_cd,
-cl_race_4_cd,
-cl_race_5_cd,
-cl_dob_dt,
-cl_conv_dt,
-au_impact_conv_cd,
-au_conv_dt,
-au_res_zip_addr,
-au_mask,
-cl_impact_conv_cd,
-year,
-year_num,
-month,
-month_num,
-year_char,
-month_char,
-id,
-dup,
-file,
-cl_id_num,
-case_id,
-dt_diff_ind,
-dt_diff,
-on_snap_jan19,
-snap_churned_last_1_year,
-snap_churned_last_2_years,
-snap_earliest_date,
-snap_enrolled_last_1_year,
-snap_enrolled_last_2_years,
-exp_snap_elig,
-alzheimers,
-parkinsons,
-dementia,
-magi,
-adi_natrank,
-cl_liv_arngmt_type_cd,
-within_1_mi,
-within_3_mi,
-within_10_mi,
-town_name,
-unemployment_rate,
-earliest_date)
# Define paths, load data
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"snap_heterogeneity", "data")
image_path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks",
"Dohyun", "snap_heterogeneity", "images",
"model_metrics")
# Includes just Likely SNAP Eligible people
dd <- read_parquet(paste0(path, "/new_analytical_table_main.parquet"))
library(dplyr)
library(arrow)
library(pubtheme)
library(glmnet)
library(randomForest)
library(RColorBrewer)
library(fastDummies)
library(tidyverse)
# Includes just Likely SNAP Eligible people
dd <- read_parquet(paste0(path, "/new_analytical_table_main.parquet"))
# Omit unneeded variables
dd2 <- dd %>%
select(-file_yr,
-cl_au_num,
-au_num,
-edge_id,
-au_prog_cd,
-cl_au_sts_cd,
-cl_au_sts_reas_cd,
-cl_bm_beg_dt,
-au_bm_beg_dt,
-cl_pd_thru_dt,
-au_pd_thru_dt,
-cl_ssn_num,
-cl_race_2_cd,
-cl_race_3_cd,
-cl_race_4_cd,
-cl_race_5_cd,
-cl_dob_dt,
-cl_conv_dt,
-au_impact_conv_cd,
-au_conv_dt,
-au_res_zip_addr,
-au_mask,
-cl_impact_conv_cd,
-year,
-year_num,
-month,
-month_num,
-year_char,
-month_char,
-id,
-dup,
-file,
-cl_id_num,
-case_id,
-dt_diff_ind,
-dt_diff,
-on_snap_jan19,
-snap_churned_last_1_year,
-snap_churned_last_2_years,
-snap_earliest_date,
-snap_enrolled_last_1_year,
-snap_enrolled_last_2_years,
-exp_snap_elig,
-alzheimers,
-parkinsons,
-dementia,
-magi,
-adi_natrank,
-cl_liv_arngmt_type_cd,
-within_1_mi,
-within_3_mi,
-within_10_mi,
-town_name,
-unemployment_rate,
-earliest_date)
# Remove columns with more than 40% missing values
dd3 <- remove_high_na_columns(dd2)
# Collapse categorical variables with many levels
dd3 <- dd3 %>%
mutate(
cl_prim_lang_cd = ifelse(!cl_prim_lang_cd %in% c("English", "Spanish"),
"Other",
cl_prim_lang_cd),
cl_hsp_latn_eth_ind = ifelse(cl_hsp_latn_eth_ind != "Non-Hispanic",
"Hispanic",
cl_hsp_latn_eth_ind),
cl_race_1_cd = ifelse(!cl_race_1_cd %in% c("Asian", "Black", "White"),
"Other",
cl_race_1_cd)
)
# Keep complete cases
dd4 <- dd3[complete.cases(dd3), ]
# Ungroup then omit ssn_mask
dd4 <- dd4 %>%
ungroup() %>%
select(-ssn_mask)
# Keep complete cases
dd4 <- dd3[complete.cases(dd3), ]
# Ungroup then omit ssn_mask
dd4 <- dd4 %>%
ungroup() %>%
select(-ssn_mask)
fit2 <- glm(on_snap_2019 ~ ., family = "binomial", data = dd4)
summary(fit2)
exp(-9.239e-03)
# Keep observations with complete rows for training
dd5 <- dd3[complete.cases(dd3), ]
dd5 <- dd5 %>%
ungroup() %>%
select(-ssn_mask)
# Get the variables which are continuous and categorical
continuous_var <- sapply(dd5, is.numeric)
categorical_var <- sapply(dd5, is.factor) | sapply(dd5, is.character)
continuous_names <- names(dd5)[continuous_var]
categorical_names <- names(dd5)[categorical_var]
# One-hot encode the nominal categorical variables
dd5 <- dummy_cols(dd5,
select_columns = categorical_names,
remove_first_dummy = FALSE,
remove_selected_columns = TRUE)
non_binary_vars <- continuous_names[continuous_names %in%
c("au_bnft_amt",
"age",
"enrolled_months_last_1_year",
"enrolled_months_last_2_years",
"num_conditions",
"within_5_mi")]
# Apply Z-score normalization to continuous variables
dd5[non_binary_vars] <- lapply(dd5[non_binary_vars], zscore_normalize)
# Convert dataframe to matrix
x <- dd5 %>%
select(-on_snap_2019) %>%
as.matrix()
# Set on SNAP in Jan 2019 binary indicator as outcome variable
y <- dd5$on_snap_2019
# Define LASSO model
las1 <- cv.glmnet(x = x, y = y, alpha = 1, family = "binomial")
# Get the coefficients from the LASSO model
lasso_coefs <- coef(las1, s = las1$lambda.min)
# Get which variables don't get zeroed out
selected_vars <- which(lasso_coefs != 0)
# Omit the intercept
selected_vars <- selected_vars[-1]
# Re-adjust indices
selected_vars <- selected_vars - 1
# Filter the predictors for the non-zeroed variables
selected_x <- x[, selected_vars]
summary(post_lasso_logit)
# Post-LASSO Logit model (coefficient intepretation should be similar)
post_lasso_logit <- glm(y ~ selected_x, family = "binomial", data = dd5)
summary(post_lasso_logit)
exp(-0.049293)
# Extract the coefficients of the Post-LASSO OLS model
post_lasso_logit_coefs <- coef(post_lasso_logit)
logit_coefs <- coef(fit2)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2
coefs_tbl2$post_lasso_logit
post_lasso_logit_coefs
length(post_lasso_logit_coefs)
length(logit_coefs)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
post_lasso_logit_coefs
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2 <- rownames_to_column(coefs_tbl2, var = "variable")
View(coefs_tbl2)
post_lasso_logit_coefs
post_lasso_logit_coefs[-1]
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs
length(coefs_tbl2$post_lasso_logit[selected_vars])
length(post_lasso_logit_coefs)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
logit_coefs <- coef(fit2)
logit_coefs
summary(post_lasso_ols_model)
summary(post_lasso_logit)
# Extract the coefficients of the Post-LASSO OLS model
post_lasso_logit_coefs <- coef(post_lasso_logit)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = post_lasso_logit_coefs
)
View(coefs_tbl2)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = post_lasso_logit_coefs
)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = post_lasso_logit_coefs
)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2 <- rownames_to_column(coefs_tbl2, var = "variable")
View(coefs_tbl2)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2$post_lasso_logit[selected_vars]
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs
post_lasso_logit_coefs
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs
length(post_lasso_logit_coefs)
length(coefs_tbl2$post_lasso_logit[selected_vars])
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2$post_lasso_logit[selected_x] <- post_lasso_logit_coefs[-1]
selected_vars
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
coefs_tbl2 <- rownames_to_column(coefs_tbl2, var = "variable")
View(coefs_tbl2)
# Post-LASSO Logit model (coefficient intepretation should be similar)
post_lasso_logit <- glm(y ~ selected_x, family = "binomial", data = dd5)
summary(post_lasso_logit)
# Extract the coefficients of the Post-LASSO OLS model
post_lasso_logit_coefs <- coef(post_lasso_logit)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
logit_coefs
length(logit_coefs)
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
dim(coefs_tbl2)
dim(post_lasso_logit_coefs[-1])
length(post_lasso_logit_coefs[-1])
length(post_lasso_logit[selected_vars])
post_lasso_logit_coefs[-1]
length(post_lasso_logit_coefs[-1])
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
post_lasso_logit_coefs
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
# Initialize table of coefficients
coefs_tbl2 <- data.frame(
logit = logit_coefs,
post_lasso_logit = NA
)
coefs_tbl2$post_lasso_logit[selected_vars] <- post_lasso_logit_coefs[-1]
# Fit the Post-LASSO OLS model
post_lasso_ols_model <- lm(y ~ selected_x)
summary(post_lasso_ols_model)
# Fit OLS model and extract coefficients
fit1 <- lm(on_snap_2019 ~ ., data = dd4)
ols_coefs <- coef(fit1)
# Extract the coefficients of the Post-LASSO OLS model
post_lasso_ols_coefs <- coef(post_lasso_ols_model)
# Initialize table of coefficients
coefs_tbl <- data.frame(
ols = ols_coefs,
post_lasso_ols = NA
)
coefs_tbl$post_lasso_ols[selected_vars] <- post_lasso_ols_coefs[-1]
post_lasso_ols_coefs
# Initialize table of coefficients
coefs_tbl <- data.frame(
ols = ols_coefs,
post_lasso_ols = NA
)
coefs_tbl$post_lasso_ols[selected_vars] <- post_lasso_ols_coefs[-1]
coefs_tbl <- rownames_to_column(coefs_tbl, var = "variable")
View(coefs_tbl)
View(coefs_tbl)
coefs_tbl$post_lasso_ols[selected_vars] <- post_lasso_ols_coefs[-1]
post_lasso_ols_coefs[-1]
length(post_lasso_ols_coefs[-1])
selected_vars
length(selected_vars)
coefs_tbl$post_lasso_ols[selected_vars]
coefs_tbl$ols[selected_vars]
length(coefs_tbl$ols[selected_vars])
length(coefs_tbl$post_lasso_ols[selected_vars])
coefs_tbl$post_lasso_ols[selected_vars] <- post_lasso_ols_coefs[-1]
post_lasso_ols_coefs[-1]
length(post_lasso_ols_coefs[-1])
length(coefs_tbl$post_lasso_ols[selected_vars])
library(dplyr)
library(haven)
library(tidyverse)
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp")
temp <- readRDS(paste0(path, "/Temp/fmr_1997_2021.rds"))
View(temp)
