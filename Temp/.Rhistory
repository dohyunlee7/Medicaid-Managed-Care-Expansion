View(df)
# Load claims parquet files from 2015-18
files <- list.files(claims_path,
pattern = "claims_201[5-8].parquet",
full.names = TRUE)
# Load claims parquet files from 2015-18
files <- list.files(claims_path,
pattern = "claims_201[5-8].parquet",
full.names = TRUE)
parquet_files <- paste0("'", paste(files, collapse = "','"), "'")
parquet_files
sql <- paste("CREATE TABLE combined_claims AS SELECT * FROM",
paste0("UNION ALL SELECT * FROM ", parquet_files))
sql
dbExecute(con, sql)
sql <- paste("CREATE TABLE combined_claims AS SELECT * FROM",
paste0("READ_PARQUET(", parquet_files, ")"))
dbExecute(con, sql)
files
# Load claims parquet files from 2015-18
files <- list.files(claims_path,
pattern = "claims_201[5-8].parquet",
full.names = TRUE)
claims <- map_df(files, read_parquet)
# Read in 30 CCW
ccw_dict <-  read_csv(paste0(path, "/new_ccw_codes_dict.csv"))
# Remove the "0-" in front of the codes
claims$claim_prim_diag_code <- gsub("^0-", "", claims$claim_prim_diag_code)
# Remove the periods in our CCW dictionary
ccw_dict$split_diag_codes <- gsub("\\.", "", ccw_dict$split_diag_codes)
# Matching the diagnosis codes to the CCW dictionary
matched_positions <- match(claims$claim_prim_diag_code,
ccw_dict$split_diag_codes)
claims$cc_name <- ccw_dict$condition[matched_positions]
# Split data into list by grouping recip_ids
result <- claims %>%
group_by(recip_id) %>%
group_split() %>%
as.list()
# Set names of sublists as the recip_id
result <- setNames(result,
sapply(result,
function(x) unique(x$recip_id)))
# Function to filter members with claim years from 2015-2018 in all four years
filter_recips <- function(df) {
df %>%
mutate(claim_year = year(claim_date)) %>%
filter(claim_year >= 2015 & claim_year <= 2018) %>%
group_by(recip_id) %>%
filter(n_distinct(claim_year) == 4)
}
# Apply function to each dataframe
list_of_dfs <- map(result, filter_recips)
typeof(result)
a <- filter_recips(result[["1"]])
View(a)
View(result)
# Function to filter members with claim years from 2015-2018 in all four years
filter_recips <- function(df) {
all(2015:2018 %in% year(df$claim_date))
}
a <- filter_recips(result[["1"]])
a <- filter_recips(result[["1000"]])
# Function to filter members with claim years from 2015-2018 in all four years
has_all_years <- function(df) {
all(2015:2018 %in% year(df$claim_date))
}
# Filter the list
filtered_list <- result %>%
keep(~ has_all_years(.))
View(filtered_list)
View(filtered_list)
View(filtered_list)
a <- filtered_list[["10002"]]
View(a)
#' Checks if there are NAs in chronic condition name throughout 2015-17
#' @param df dataframe within the list
has_na_in_cc <- function(df) {
# Filter for years 2015-17
df_filtered <- df %>%
filter(year(df$claim_date) %in% 2015:2017)
# Check if all records for given recip_id have NA in cc_name
all_na <- all(is.na(df_filtered$cc_name))
return(all_na)
}
filtered_list2 <- filtered_list %>%
keep(has_na_in_cc)
View(filtered_list2)
a <- filtered_list2[["100000"]]
View(a)
a <- filtered_list2[["1000049"]]
View(a)
a <- filtered_list2[["100045"]]
View(a)
#' Filters list for members who had a new CC in 2018 after not having
#' any from 2015-17
#' @param df dataframe within the list
new_diag_cc_2018 <- function(df) {
df %>%
filter(year == 2018 & !is.na(cc_name))
}
filtered_list3 <- filtered_list2 %>%
map(~ new_diag_cc_2018(.)) %>%
keep(~ nrow(.) > 0)
#' Filters list for members who had a new CC in 2018 after not having
#' any from 2015-17
#' @param df dataframe within the list
new_diag_cc_2018 <- function(df) {
df %>%
filter(year(df$claim_date) == 2018 & !is.na(cc_name))
}
filtered_list3 <- filtered_list2 %>%
map(~ new_diag_cc_2018(.)) %>%
keep(~ nrow(.) > 0)
View(filtered_list3)
#' Filters list for members who had a new CC in 2018 after not having
#' any from 2015-17
#' @param df dataframe within the list
new_diag_cc_2018 <- function(df) {
df_2018 <- df %>%
filter(year(df$claim_date) == 2018)
any_non_na <- any(!is.na(df_2018$cc_name))
return(any_non_na)
}
filtered_list3 <- filtered_list2 %>%
keep(new_diag_cc_2018)
View(filtered_list3)
a <- filtered_list3[["1000001"]]
View(a)
a <- filtered_list3[["1000134"]]
View(a)
# Get all the unique recip_ids
recip_ids <- lapply(filtered_list3, function(x) x$recip_id)
unique_recip_ids <- unique(unlist(recip_ids))
head(unique_recip_ids)
# All recip_ids that are continuously enrolled from 2015-2018
fs_filtered <- fs %>%
filter(ssn_mask %in% unique_recip_ids)
fs <- read_parquet(paste0(path, "/df_ems_imp_bind_fs.parquet"))
# All recip_ids that are continuously enrolled from 2015-2018
fs_filtered <- fs %>%
filter(ssn_mask %in% unique_recip_ids)
# Create list of dataframes that have the person's ssn_mask, SNAP enrolled
# dates, and earliest enrolled date
fs_filtered_list <- fs_filtered %>%
select(ssn_mask, cl_bm_beg_dt) %>%
group_by(ssn_mask) %>%
arrange(cl_bm_beg_dt) %>%
mutate(earliest_date = min(cl_bm_beg_dt)) %>%
group_split() %>%
as.list()
View(fs_filtered_list)
a <- filtered_list3[["53"]]
View(a)
fs_filtered_list <- setNames(fs_filtered_list,
sapply(fs_filtered_list,
function(x) unique(x$ssn_mask)))
a <- filtered_list3[["72"]]
View(a)
# Create df with each member's ssn_mask and earliest date enrolled in SNAP
snap_earliest_dates <- data.frame(
ssn_mask = names(fs_filtered_list),
earliest_date = as.Date(sapply(fs_filtered_list,
function(x) unique(x$earliest_date)))
)
View(snap_earliest_dates)
snap_earliest_dates2 <- snap_earliest_dates %>%
filter(year(earliest_date) == 2018)
View(snap_earliest_dates2)
a <- filtered_list3[["4627"]]
View(a)
a <- filtered_list3[["4860"]]
View(a)
View(fs_filtered)
x <- fs_filtered %>% filter(ssn_mask == "4860")
View(x)
View(snap_earliest_dates2)
df %>%
filter(!is.na(cc_name)) %>%
group_by(member_id) %>%
summarise(first_cc_date = min(claim_date, na.rm = TRUE),
.groups = 'drop')
first_cc_name <- function(df) {
df %>%
filter(!is.na(cc_name)) %>%
group_by(member_id) %>%
summarise(first_cc_date = min(claim_date, na.rm = TRUE),
.groups = 'drop')
}
# Apply the function to each data frame in the list and combine results
new_cc_dates <- filtered_list3 %>%
map_df(~ first_non_na_cc_name(.))
# Apply the function to each data frame in the list and combine results
new_cc_dates <- filtered_list3 %>%
map_df(~ first_cc_name(.))
first_cc_name <- function(df) {
df %>%
filter(!is.na(cc_name)) %>%
group_by(recip_id) %>%
summarise(first_cc_date = min(claim_date, na.rm = TRUE),
.groups = 'drop')
}
# Apply the function to each data frame in the list and combine results
new_cc_dates <- filtered_list3 %>%
map_df(~ first_cc_name(.))
View(new_cc_dates)
View(new_cc_dates)
cc_dates_df <- left_join(snap_earliest_dates2,
new_cc_dates,
by = c("ssn_mask" = "recip_id"))
View(cc_dates_df)
cc_dates_df <- cc_dates_df %>%
filter(earliest_date > first_cc_date)
View(cc_dates_df)
cc_dates_df <- cc_dates_df %>%
mutate(dist = difftime(earliest_date, first_cc_date, units = "days"))
mean(cc_dates_df$dist)
range(cc_dates_df$dist)
# Get the first instance of a member's CC diagnosis after having no condition
# from 2015-2017
first_cc_name <- function(df) {
df %>%
filter(!is.na(cc_name)) %>%
group_by(recip_id) %>%
summarise(first_cc_date = min(claim_date, na.rm = TRUE),
cc_name = cc_name[which.min(claim_date)],
.groups = 'drop')
}
# Apply the function to each data frame in the list and combine results
new_cc_dates <- filtered_list3 %>%
map_df(~ first_cc_name(.))
cc_dates_df <- left_join(snap_earliest_dates2,
new_cc_dates,
by = c("ssn_mask" = "recip_id"))
cc_dates_df <- cc_dates_df %>%
filter(earliest_date > first_cc_date)
cc_dates_df <- cc_dates_df %>%
mutate(dist = difftime(earliest_date, first_cc_date, units = "days"))
table(cc_dates_df$cc_name)
table(cc_dates_df$cc_name) %>% arrange(desc())
sort(table(cc_dates_df$cc_name), decreasing = T)
View(claims)
View(cc_dates_df)
cc_dates_summary <- cc_dates_df %>%
group_by(cc_name) %>%
summarise(avg_days = mean(dist))
View(cc_dates_summary)
cc_dates_summary <- cc_dates_df %>%
group_by(cc_name) %>%
summarise(avg_days = round(mean(dist), 2)) %>%
arrange(desc(avg_days))
View(cc_dates_summary)
cc_dates_summary <- cc_dates_df %>%
group_by(cc_name) %>%
summarise(avg_days = round(mean(dist), 2)) %>%
arrange(avg_days)
View(cc_dates_summary)
cc_dates_summary <- cc_dates_df %>%
group_by(cc_name) %>%
summarise(avg_days = round(mean(dist), 2),
count = n()) %>%
arrange(avg_days)
View(cc_dates_summary)
cc_dates_summary <- cc_dates_df %>%
group_by(cc_name) %>%
summarise(avg_days = round(mean(dist), 2),
num_members = n()) %>%
arrange(avg_days)
cc_dates_summary <- cc_dates_df %>%
group_by(cc_name) %>%
summarise(num_members = n(),
avg_days = round(mean(dist), 2)) %>%
arrange(avg_days)
View(cc_dates_summary)
cc_dates_df <- left_join(snap_earliest_dates2,
new_cc_dates,
by = c("ssn_mask" = "recip_id"))
# Filtering for members who enrolled in SNAP after being first diagnosed
# with a CC
cc_dates_df2 <- cc_dates_df %>%
filter(earliest_date > first_cc_date)
# Calculate number of days taken to enroll after being diagnosed
cc_dates_df2 <- cc_dates_df2 %>%
mutate(dist = difftime(earliest_date, first_cc_date, units = "days"))
cc_dates_summary <- cc_dates_df2 %>%
group_by(cc_name) %>%
summarise(num_members = n(),
avg_days = round(mean(dist), 2)) %>%
arrange(avg_days)
nrow(cc_dates_df2) / nrow(cc_dates_df)
View(filtered_list3)
a <- filtered_list3[["1000134"]]
a <- filtered_list3[["1000155"]]
View(a)
# 46% of newly diagnosed
nrow(cc_dates_df2) / length(filtered_list_3)
# 46% of newly diagnosed
nrow(cc_dates_df2) / length(filtered_list3)
View(cc_dates_df2)
View(cc_dates_df)
setwd(file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report", "raw_comp_mco_data"))
a <- read_csv("raw_data_2003.csv")
library(readr)
a <- read_csv("raw_data_2003.csv")
View(a)
a <- read_csv("raw_data_2004.csv
")
View(a)
a <- read_csv("raw_data_2004.csv")
View(a)
?read_csv
?read.csv
a <- read.csv("raw_data_2004.csv")
a <- read_csv("raw_data_2004.csv")
file_names <- paste0("data_", years, ".csv")
years <- 2003:2010
file_names <- paste0("data_", years, ".csv")
data_list <- lapply(file_names, read.csv)
file_names <- paste0("raw_data_", years, ".csv")
data_list <- lapply(file_names, read.csv)
data_list <- lapply(file_names, read_csv)
names(data_list) <- years
View(data_list)
View(a)
data_list <- lapply(data_list, strsplit(","))
data_list <- lapply(data_list, strsplit(data_list, ","))
a2 <- strsplit(a, ",")
a2 <- strsplit(a, ",")
View(data_list)
data_list[["2003"]][["Title: Total Medicaid MCO Enrollment | KFF"]]
A
a
a2 <- strsplit(a, ",")
a
a2 <- strsplit(a, ",")
View(a)
View(a)
file_names <- paste0("raw_data_", years, ".csv")
data_list <- lapply(file_names, read_csv)
View(data_list)
years <- 2003:2010
file_names <- paste0("raw_data_", years, ".csv")
file_names
data_list <- lapply(file_names, read_csv)
data_list <- lapply(file_names, read_csv(delim = ","))
read_csv_custom <- function(file) {
read_csv(file, delim = ",")
}
data_list <- lapply(file_names, read_csv_custom)
read_csv_custom <- function(file) {
read_csv(file, delim = ",")
}
data_list <- lapply(file_names, read_csv_custom)
read_csv_custom <- function(file) {
read_csv(file, delim = ",", quote = "")
}
data_list <- lapply(file_names, read_csv_custom)
years <- 2003:2010
file_names <- paste0("raw_data_", years, ".csv")
data_list <- lapply(file_names, read_csv_custom)
View(data_list)
View(a)
data_split <- data.frame(do.call('rbind', strsplit(as.character(a$`Title: Total Medicaid MCO Enrollment | KFF`), ',', fixed = TRUE)))
View(data_split)
data_split <- lapply(data_list, function(data) {
data.frame(do.call('rbind', strsplit(as.character(data$`Title: Total Medicaid MCO Enrollment | KFF`), ',', fixed = TRUE)))
})
View(data_split)
file_names <- paste0("raw_data_", years, ".csv")
data_list <- lapply(file_names, read_csv)
names(data_list) <- years
data_split <- lapply(data_list, function(data) {
data.frame(do.call('rbind', strsplit(as.character(data$`Title: Total Medicaid MCO Enrollment | KFF`), ',', fixed = TRUE)))
})
View(data_split)
data_split[["2003"]][["X1"]]
data_split[["2003"]][["X4"]]
names(data_list[["2003"]])
file_names <- paste0("raw_data_", years, ".csv")
data_list <- lapply(file_names, read_csv)
names(data_list) <- years
update_names <- function(year) {
specific_sublist_name <- "Title: Total Medicaid MCO Enrollment | KFF"
if (specific_sublist_name %in% names(data_list[[year]])) {
names(data_list[[year]][[specific_sublist_name]]) <- new_names
}
return(data_list[[year]])
}
data_list <- lapply(names(data_list), update_names)
data_split <- lapply(data_list, function(data) {
data.frame(do.call('rbind',
strsplit(as.character(data$`Title: Total Medicaid MCO Enrollment | KFF`), ',', fixed = TRUE)))
})
View(data_list)
for (year in years) {
names(data_list[[year]]) <- "total_mmc_enr"
}
years
year
names(data_list[[year]])
# Define years
years <- 2003:2010
# Get all file names with the years attached
file_names <- paste0("raw_data_", years, ".csv")
# Apply read_csv to the file names
data_list <- lapply(file_names, read_csv)
# Assign years as names of sublists
names(data_list) <- years
for (year in years) {
names(data_list[[year]]) <- "total_mmc_enr"
}
names(data_list[[year]])
data_list[[year]]
years
year
data_list[[year]]
data_list[[as.character(year)]]
for (year in years) {
names(data_list[[as.character(year)]]) <- "total_mmc_enr"
}
View(data_list)
new_name <- "total_mmc_enr"
return(sublist)
data_list <- lapply(years, function(year) {
sublist <- data_list[[as.character(year)]]
names(sublist) <- new_name
return(sublist)
})
View(data_list)
data_split <- lapply(data_list, function(data) {
data.frame(do.call('rbind', strsplit(as.character(data$total_mmc_enr),
',',
fixed = TRUE)))
})
View(data_split)
View(data_list)
# Apply read_csv to the file names
data_list <- lapply(file_names, read_csv)
# Assign years as names of sublists
names(data_list) <- years
new_name <- "total_mmc_enr"
data_list <- lapply(years, function(year) {
sublist <- data_list[[as.character(year)]]
names(sublist) <- new_name
return(sublist)
})
View(data_list)
names(data_list) <- years
View(data_list)
data_split <- lapply(data_list, function(data) {
data.frame(do.call('rbind', strsplit(as.character(data$total_mmc_enr),
',',
fixed = TRUE)))
})
View(data_split)
data_comb <- do.call(rbind, data_split)
View(data_comb)
names(data_split)
year
for (year in names(data_split)) {
}
year
for (year in names(data_split)) {
data_split[[year]]$year <- as.numeric(year)
}
data_comb <- do.call(rbind, data_split)
View(data_comb)
data_split[[year]]
names(data_split[[year]])
for (year in names(data_split)) {
data_split[[year]]$year <- as.numeric(year)
data_split[[year]][-(56:71), ]
}
View(data_split)
for (year in names(data_split)) {
data_split[[year]]$year <- as.numeric(year)
data_split[[year]] <- data_split[[year]][-(56:71), ]
}
data_split[["2003"]]
for (year in names(data_split)) {
data_split[[year]]$year <- as.numeric(year)
data_split[[year]] <- data_split[[year]][-(1:2, 56:71), ]
for (year in names(data_split)) {
data_split[[year]]$year <- as.numeric(year)
data_split[[year]] <- data_split[[year]][-c(1:2, 56:71), ]
}
for (year in names(data_split)) {
# Add variable for year
data_split[[year]]$year <- as.numeric(year)
# Omit unneeded rows
data_split[[year]] <- data_split[[year]][-c(1:2, 56:71), ]
}
data_comb <- do.call(rbind, data_split)
data_comb <- data_comb[, -"X4"]
data_comb <- data_comb[, -c("X4")]
data_comb <- data_comb[, "X4"]
data_comb <- do.call(rbind, data_split)
data_comb <- data_comb[, -4]
names(data_comb) <- c("state",
"crb_mc_enrollees",
"med_enr_pct",
"year")
data_comb[data_comb == "N/A"] <- NA
data_comb[data_comb == "N/A"]
data_comb
View(data_comb)
data_comb$crb_mc_enrollees <- as.numeric(data_comb$crb_mc_enrollees)
View(data_comb)
setwd("D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/Temp")
save(data_comb, file = "comp_mco_03_10.Rda")
