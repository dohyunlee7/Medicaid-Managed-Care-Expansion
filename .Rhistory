filter(year >= (t_prime - window) & year <= (t_prime + window)) %>%
arrange(year) %>%
mutate(diff_y = c(NA, diff(pct_in_managed_care))) %>%
summarize(
smoothness = sd(diff_y, na.rm = TRUE),  # Calculate smoothness (SD of differences)
.groups = "drop"
)
}
smoothness_ranking <- new_merged_data %>%
group_by(state) %>%
mutate(t_prime = unique(t_prime)) %>%
calculate_smoothness() %>%
arrange(smoothness) %>%
mutate(rank = row_number())
View(smoothness_ranking)
runApp('mco_tracker.R')
calculate_smoothness <- function(data, window = 2) {
data %>%
group_by(state) %>%  # Group by state to calculate separately for each state
filter(year >= (t_prime - window) & year <= (t_prime + window)) %>%
arrange(year) %>%
mutate(diff_y = c(NA, diff(pct_in_managed_care))) %>%
summarize(
smoothness = sd(diff_y, na.rm = TRUE),  # Calculate smoothness (SD of differences)
.groups = "drop"
)
}
smoothness_ranking <- new_merged_data %>%
group_by(state) %>%
mutate(t_prime = unique(t_prime)) %>%
calculate_smoothness() %>%
arrange(smoothness) %>%
mutate(rank = row_number())
View(smoothness_ranking)
calculate_smoothness <- function(data, window = 6) {
data %>%
group_by(state) %>%  # Group by state to calculate separately for each state
filter(year >= (t_prime - window) & year <= (t_prime + window)) %>%
arrange(year) %>%
mutate(diff_y = c(NA, diff(pct_in_managed_care))) %>%
summarize(
smoothness = sd(diff_y, na.rm = TRUE),  # Calculate smoothness (SD of differences)
.groups = "drop"
)
}
smoothness_ranking <- new_merged_data %>%
group_by(state) %>%
mutate(t_prime = unique(t_prime)) %>%
calculate_smoothness() %>%
arrange(smoothness) %>%
mutate(rank = row_number())
View(smoothness_ranking)
runApp('mco_tracker.R')
calculate_smoothness <- function(data) {
data %>%
group_by(state) %>%
arrange(year) %>%
mutate(diff_y = c(NA, diff(pct_in_managed_care))) %>%  # Year-to-year changes
summarize(
smoothness = sd(diff_y, na.rm = TRUE),  # Measure abrupt changes using standard deviation
max_spike = max(abs(diff_y), na.rm = TRUE),  # Capture the largest spike
.groups = "drop"
)
}
smoothness_ranking <- new_merged_data %>%
calculate_smoothness() %>%
arrange(smoothness) %>%
mutate(rank = row_number())
View(smoothness_ranking)
new_merged_data2 <- new_merged_data %>%
filter(!is.na(t_prime))
smoothness_ranking <- new_merged_data2 %>%
calculate_smoothness() %>%
arrange(smoothness) %>%
mutate(rank = row_number())
View(smoothness_ranking)
View(new_merged_data2)
#' Converts pdf to list
#' @param text page of text as a string
#' @return list with each line as its own sublist
pdf_to_list <- function(text) {
# Split the string into lines
lines <- strsplit(text, "\n")[[1]]
# Process each line
list_data <- lapply(lines, function(line) {
# Split the cleaned line by 2 or more spaces or tabs
columns <- strsplit(line, "\\s{2,}|\t")[[1]]
return(columns)
})
return(list_data)
}
#' Shifts columns to match the PDF table structure
#' @param data text data organized as line by line text in a list
#' @return dataframe with values in the correct place
shift_columns <- function(data, expected_cols = 10) {
shifted_data <- lapply(data, function(row) {
# Step 1: Handle footnotes in the state name (column 1 and 2)
if (nchar(row[2]) == 1 & row[2] %in% as.character(0:9)) {
# Combine the state name with the footnote
row[1] <- paste0(row[1], row[2])
# Shift all subsequent values one position to the left
row <- c(row[1], row[3:length(row)], "")
}
# Step 2: Adjust the number of columns to match the expected format
# If too many columns, trim the extra ones
if (length(row) > expected_cols) {
row <- row[1:expected_cols]
}
# If too few columns, pad with empty strings
if (length(row) < expected_cols) {
row <- c(row, rep("", expected_cols - length(row)))
}
return(row)
})
shifted_df <- as.data.frame(do.call(rbind, shifted_data), stringsAsFactors = F)
return(shifted_df)
}
library(dplyr)
library(readxl)
library(pdftools)
library(tidyverse)
setwd(file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp"))
pdf_path <- file.path(getwd(), "Input_Data",
"Medicaid_managedcare_enrollment_report",
"reports",
"2013 Medicaid Report.pdf")
# Extract tables from pdf
pages <- pdf_text(pdf_path)[c(9, 10)]
list_data <- lapply(pages, pdf_to_list)
# Transform into dataframe
df <- as.data.frame(do.call(rbind, list_data[[1]]))
df2 <- as.data.frame(do.call(rbind, list_data[[2]]))
# Omit unnecessary rows
df <- df[-c(1:4, 47), ]
df2 <- df2[-c(1:4, 19:26), ]
# Combine dfs
df3 <- rbind(df, df2)
# Change variable names
names(df3) <- c("state", "total_med_enr","comp_mco", "pccm", "mltss",
"bho", "dental", "transportation", "pace", "other")
# Replace '--' and 'n/a' with NA
df3[df3 == "--" | df3 == "n/a"] <- NA
# Convert character numbers to numeric for all columns
df3[-1] <- lapply(df3[-1], function(x) as.numeric(gsub(",", "", x)))
View(df3)
View(new_merged_data)
pdf_path <- file.path(getwd(), "Input_Data",
"Medicaid_managedcare_enrollment_report",
"reports",
"2014-medicaid-managed-care-enrollment-report_0.pdf")
# Extract pages with the tables
pages <- pdf_text(pdf_path)[c(20, 21)]
list_data <- lapply(pages, pdf_to_list)
# Transform as dataframe
df <- as.data.frame(do.call(rbind, list_data[[1]]))
df2 <- as.data.frame(do.call(rbind, list_data[[2]]))
# Omit unnecessary rows
df <- df[-c(1:5, 46), ]
df2 <- df2[-c(1:4, 21:30), ]
# Combine the two tables
df3 <- rbind(df, df2)
# Change variable names
names(df3) <- c("state", "total_med_enr","comp_mco", "pccm", "mltss",
"bho", "dental", "transportation", "pace", "other")
# Replace '--' and 'n/a' with NA
df3[df3 == "--" | df3 == "n/a"] <- NA
# Convert character numbers to numeric for all columns
df3[-1] <- lapply(df3[-1], function(x) as.numeric(gsub(",", "", x)))
# Omit footnote numbers that follow the state name
df3$state <- gsub("[0-9]", "", df3$state)
View(df3)
path
comp_mco_2013 <- read_csv(paste0(path, file.path("Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data")))
comp_mco_2013 <- read_csv(paste0(path, file.path("Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
paste0(path, file.path("Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv"))
comp_mco_2013 <- read_csv(paste0(path, file.path("Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
View(comp_mco_2013)
comp_mco_2013 <- read.csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
delim = ",")
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
delim = ',')
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
quote = ',')
View(comp_mco_2013)
comp_mco_2013 <- read_delim(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
delim = ',')
comp_mco_2013 <- read_delim(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read.csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
sep = ',')
comp_mco_2013 <- read.csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
sep = ",")
comp_mco_2013 <- read.csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read.csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
delim = ',')
paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv"))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
delim = ',')
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")),
delim = ",")
comp_mco_2013 <- read_csv(delim = ",", paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2014.csv")),
delim = ",")
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2014.csv")))
comp_mco_2013 <- read_csv(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2011.csv")))
comp_mco_2013 <- readLines(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2011.csv")))
comp_mco_2013 <- readLines(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
#' Clean lines and split by commas
#' @param file_name text file
#' @return cleaned dataframe
clean_and_split <- function(file_name) {
# Read the file as raw lines
lines <- readLines(file_name)
# Filter lines that contain a valid state name
filtered_lines <- lines[sapply(lines, function(line) {
any(sapply(state_names, grepl, line))
})]
# Split the remaining lines by commas
cleaned_data <- do.call(rbind, lapply(filtered_lines, function(line) {
unlist(strsplit(line, ","))
}))
# Convert to data frame
df <- as.data.frame(cleaned_data, stringsAsFactors = FALSE)
# Extract year from file name and add as a new column
year <- as.numeric(gsub(".*_(\\d{4})\\.csv$", "\\1", file_name))
df$year <- year
return(df)
}
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- read_excel(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
### ------------- Integrate Comp. MCO data from KFF Tracker ---------------- ###
# Read in files with MMC population by state
comp_path <- paste0(path,
file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data"))
# Get vector of years we need for Comp. MCO
years <- 2003:2011
# Get vector of file names and use apply function to read in files in one line
comp_file_names <- paste0(comp_path, "/raw_data_", years, ".csv")
# Get names of states
state_names <- c(state.name, "District of Columbia")
comp_mco_list <- lapply(comp_file_names, clean_and_split)
names(comp_mco_list) <- years
# Clean variables in each column, rename things, convert variable types
comp_mco_list <- lapply(comp_mco_list, function(df) {
df <- df %>%
select(-V3) %>%
rename(state = V1,
comprehensive_mco_enr = V2) %>%
mutate(state = gsub('"', '', state),
comprehensive_mco_enr = gsub("[^0-9.]", "", comprehensive_mco_enr),
comprehensive_mco_enr = as.numeric(comprehensive_mco_enr))
})
### ------------- Integrate Comp. MCO data from KFF Tracker ---------------- ###
# Read in files with MMC population by state
comp_path <- paste0(path,
file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data"))
# Get vector of years we need for Comp. MCO
years <- 2003:2011
# Get vector of file names and use apply function to read in files in one line
comp_file_names <- paste0(comp_path, "/raw_data_", years, ".csv")
# Get names of states
state_names <- c(state.name, "District of Columbia")
comp_mco_list <- lapply(comp_file_names, clean_and_split)
View(comp_mco_list)
# Clean variables in each column, rename things, convert variable types
comp_mco_list <- lapply(comp_mco_list, function(df) {
df <- df %>%
select(-V3) %>%
rename(state = V1,
comprehensive_mco_enr = V2) %>%
mutate(state = gsub('"', '', state),
comprehensive_mco_enr = gsub("[^0-9.]", "", comprehensive_mco_enr),
comprehensive_mco_enr = as.numeric(comprehensive_mco_enr))
})
View(comp_mco_list)
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
View(comp_mco_2013)
comp_mco_2013 <- comp_mco_2013 %>%
select(-V3) %>%
rename(state = V1,
comprehensive_mco_enr = V2) %>%
mutate(state = gsub('"', '', state),
comprehensive_mco_enr = gsub("[^0-9.]", "", comprehensive_mco_enr),
comprehensive_mco_enr = as.numeric(comprehensive_mco_enr))
View(comp_mco_2013)
df3 <- df3 %>%
left_join(comp_mco_2013, by = "state")
View(df3)
pdf_path <- file.path(getwd(), "Input_Data",
"Medicaid_managedcare_enrollment_report",
"reports",
"2013 Medicaid Report.pdf")
# Extract tables from pdf
pages <- pdf_text(pdf_path)[c(9, 10)]
list_data <- lapply(pages, pdf_to_list)
# Transform into dataframe
df <- as.data.frame(do.call(rbind, list_data[[1]]))
df2 <- as.data.frame(do.call(rbind, list_data[[2]]))
# Omit unnecessary rows
df <- df[-c(1:4, 47), ]
df2 <- df2[-c(1:4, 19:26), ]
# Combine dfs
df3 <- rbind(df, df2)
# Change variable names
names(df3) <- c("state", "total_med_enr","comp_mco", "pccm", "mltss",
"bho", "dental", "transportation", "pace", "other")
# Replace '--' and 'n/a' with NA
df3[df3 == "--" | df3 == "n/a"] <- NA
# Convert character numbers to numeric for all columns
df3[-1] <- lapply(df3[-1], function(x) as.numeric(gsub(",", "", x)))
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- comp_mco_2013 %>%
select(-V3) %>%
rename(state = V1,
comprehensive_mco_enr = V2) %>%
mutate(state = gsub('"', '', state),
comprehensive_mco_enr = gsub("[^0-9.]", "", comprehensive_mco_enr),
comprehensive_mco_enr = as.numeric(comprehensive_mco_enr))
df3 <- df3 %>%
left_join(comp_mco_2013, by = "state")
View(df3)
df3 <- df3 %>%
left_join(comp_mco_2013, by = "state") %>%
select(-comp_mco)
save_path
save_path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report",
"by_program_pop_from_report")
write_csv(df3, file = paste0(save_path, "/data_2013.csv"))
View(df3)
pdf_path <- file.path(getwd(), "Input_Data",
"Medicaid_managedcare_enrollment_report",
"reports",
"2013 Medicaid Report.pdf")
# Extract tables from pdf
pages <- pdf_text(pdf_path)[c(9, 10)]
list_data <- lapply(pages, pdf_to_list)
# Transform into dataframe
df <- as.data.frame(do.call(rbind, list_data[[1]]))
df2 <- as.data.frame(do.call(rbind, list_data[[2]]))
# Omit unnecessary rows
df <- df[-c(1:4, 47), ]
df2 <- df2[-c(1:4, 19:26), ]
# Combine dfs
df3 <- rbind(df, df2)
# Change variable names
names(df3) <- c("state", "total_med_enr","comp_mco", "pccm", "mltss",
"bho", "dental", "transportation", "pace", "other")
# Replace '--' and 'n/a' with NA
df3[df3 == "--" | df3 == "n/a"] <- NA
# Convert character numbers to numeric for all columns
df3[-1] <- lapply(df3[-1], function(x) as.numeric(gsub(",", "", x)))
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- comp_mco_2013 %>%
select(-V3) %>%
rename(state = V1,
comprehensive_mco_enr = V2) %>%
mutate(state = gsub('"', '', state),
comprehensive_mco_enr = gsub("[^0-9.]", "", comprehensive_mco_enr),
comprehensive_mco_enr = as.numeric(comprehensive_mco_enr))
View(df3)
df3 <- df3 %>%
select(-comp_mco)
View(df3)
comp_mco_2013 <- clean_and_split(paste0(path, file.path("/Input_Data",
"Medicaid_managedcare_enrollment_report",
"raw_comp_mco_data",
"raw_data_2013.csv")))
comp_mco_2013 <- comp_mco_2013 %>%
select(-V3) %>%
rename(state = V1,
comprehensive_mco_enr = V2) %>%
mutate(state = gsub('"', '', state),
comprehensive_mco_enr = gsub("[^0-9.]", "", comprehensive_mco_enr),
comprehensive_mco_enr = as.numeric(comprehensive_mco_enr))
df3 <- df3 %>%
left_join(comp_mco_2013, by = "state")
View(df3)
write_csv(df3, file = paste0(save_path, "/data_2013.csv"))
