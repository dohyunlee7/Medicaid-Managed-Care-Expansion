}
# Run the app
shinyApp(ui = ui, server = server)
d <- readRDS(paste0(path, "/full_mco_table.rds"))
# Remove US and Puerto Rico stats
d <- d %>%
filter(!state %in% c("United States", "Puerto Rico")) %>%
filter(!year %in% 2003:2007)
ui <- fluidPage(
titlePanel("Medicaid Enrollment Percentage by State"),
sidebarLayout(
sidebarPanel(
selectInput("selected_states", "Select States:",
choices = unique(d$state),
selected = "Connecticut",
multiple = TRUE)
),
mainPanel(
plotOutput("enrollment_plot")
)
)
)
# Define server logic to draw the time-series
server <- function(input, output) {
# Filter based on selected states
dd <- reactive({
d %>%
filter(state %in% input$selected_states)
})
# Render time-series
output$enrollment_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = med_enr_pct, color = state)) +
geom_line(size = 1) +
labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
x = "Year",
y = "Percent of State Medicaid Enrollment") +
theme_pub()
})
}
# Run the app
shinyApp(ui = ui, server = server)
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report",
"by_program_pop_from_report")
d <- readRDS(paste0(path, "/full_table_with_proportions.rds"))
# Remove US and Puerto Rico stats
d <- d %>%
filter(!state %in% c("United States", "Puerto Rico")) %>%
filter(!year %in% 2003:2007)
View(d)
ui <- fluidPage(
titlePanel("Medicaid Enrollment Percentage by State"),
sidebarLayout(
sidebarPanel(
selectInput("selected_states", "Select States:",
choices = unique(d$state),
multiple = TRUE)
),
mainPanel(
plotOutput("enrollment_plot")
)
)
)
# Define server logic to draw the time-series
server <- function(input, output) {
# Filter based on selected states
dd <- reactive({
d %>%
filter(state %in% input$selected_states)
})
# Render time-series
output$enrollment_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = med_enr_pct, color = state)) +
geom_line(size = 1) +
labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
x = "Year",
y = "Percent of State Medicaid Enrollment") +
theme_pub()
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/snap_heterogeneity/scripts/mco_tracker')
ui <- fluidPage(
titlePanel("Total Medicaid MCO Enrollment"),
sidebarLayout(
sidebarPanel(
selectInput("selected_states", "Select States:",
choices = unique(d$state),
multiple = TRUE)
),
mainPanel(
plotOutput("enrollment_plot")
)
)
)
# Define server logic to draw the time-series
server <- function(input, output) {
# Filter based on selected states
dd <- reactive({
d %>%
filter(state %in% input$selected_states)
})
# Render time-series
output$enrollment_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = med_enr_pct, color = state)) +
geom_line(size = 1) +
labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
x = "Year",
y = "Percent of State Medicaid Enrollment") +
theme_pub()
})
}
# Run the app
shinyApp(ui = ui, server = server)
getwd()
View(d)
View(d)
ui <- fluidPage(
titlePanel("Total Medicaid MCO Enrollment"),
sidebarLayout(
sidebarPanel(
selectInput("selected_states", "Select States:",
choices = unique(d$state),
multiple = TRUE)
),
mainPanel(
plotOutput("enrollment_plot")
)
)
)
# Define server logic to draw the time-series
server <- function(input, output) {
# Filter based on selected states
dd <- reactive({
d %>%
filter(state %in% input$selected_states)
})
# Render time-series
# output$enrollment_plot <- renderPlot({
#   ggplot(dd(), aes(x = year, y = med_enr_pct, color = state)) +
#     geom_line(size = 1) +
#     labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
#          x = "Year",
#          y = "Percent of State Medicaid Enrollment") +
#     theme_pub()
# })
output$enrollment_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = crb_mc_enrollees, color = state)) +
geom_line(size = 1) +
labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
x = "Year",
y = "Enrollees") +
theme_pub()
})
}
# Run the app
shinyApp(ui = ui, server = server)
View(d)
ui <- fluidPage(
titlePanel("Total Medicaid MCO Enrollment"),
sidebarLayout(
sidebarPanel(
selectInput("selected_states", "Select States:",
choices = unique(d$state),
multiple = TRUE)
),
mainPanel(
plotOutput("enrollment_plot"),
plotOutput("total_plot")
)
)
)
# Define server logic to draw the time-series
server <- function(input, output) {
# Filter based on selected states
dd <- reactive({
d %>%
filter(state %in% input$selected_states)
})
# Render time-series
# output$enrollment_plot <- renderPlot({
#   ggplot(dd(), aes(x = year, y = med_enr_pct, color = state)) +
#     geom_line(size = 1) +
#     labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
#          x = "Year",
#          y = "Percent of State Medicaid Enrollment") +
#     theme_pub()
# })
output$enrollment_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = crb_mc_enrollees, color = state)) +
geom_line(size = 1) +
labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
x = "Year",
y = "Enrollees") +
theme_pub()
})
output$total_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = total_med_enr, color = state)) +
geom_line(size = 1) +
labs(title = "Total Medicaid Enrollment by State",
x = "Year",
y = "Total Medicaid Enrollees") +
theme_pub()
})
}
# Run the app
shinyApp(ui = ui, server = server)
View(d)
1568277 / 0.93995988
1568277/1668451
gt <- readRDS("/full_table_with_proportions.rds")
gt <- readRDS("full_table_with_proportions.rds")
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report",
"by_program_pop_from_report")
gt <- readRDS(paste0(path, "/full_table_with_proportions.rds"))
View(d)
View(d)
View(d)
gt <- gt %>%
mutate(total_med_enr = ifelse(is.na(total_med_enr),
crb_mc_enrollees / med_enr_pct,
total_med_enr))
View(gt)
View(gt)
gt <- readRDS(paste0(path, "/full_table_with_proportions.rds"))
View(gt)
gt <- readRDS(paste0(path, "/full_table_with_proportions.rds"))
View(gt)
gt <- gt %>%
mutate(total_med_enr = ifelse(is.na(total_med_enr),
crb_mc_enrollees / med_enr_pct,
total_med_enr))
View(gt)
# Remove US and Puerto Rico stats
d <- gt %>%
filter(!state %in% c("United States", "Puerto Rico")) %>%
filter(!year %in% 2003:2007)
ui <- fluidPage(
titlePanel("Total Medicaid MCO Enrollment"),
sidebarLayout(
sidebarPanel(
selectInput("selected_states", "Select States:",
choices = unique(d$state),
multiple = TRUE)
),
mainPanel(
plotOutput("enrollment_plot"),
plotOutput("total_plot")
)
)
)
# Define server logic to draw the time-series
server <- function(input, output) {
# Filter based on selected states
dd <- reactive({
d %>%
filter(state %in% input$selected_states)
})
# Render time-series
# output$enrollment_plot <- renderPlot({
#   ggplot(dd(), aes(x = year, y = med_enr_pct, color = state)) +
#     geom_line(size = 1) +
#     labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
#          x = "Year",
#          y = "Percent of State Medicaid Enrollment") +
#     theme_pub()
# })
output$enrollment_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = crb_mc_enrollees, color = state)) +
geom_line(size = 1) +
labs(title = "Comprehensive Risk-Based Managed Care Enrollment by State",
x = "Year",
y = "Enrollees") +
theme_pub()
})
output$total_plot <- renderPlot({
ggplot(dd(), aes(x = year, y = total_med_enr, color = state)) +
geom_line(size = 1) +
labs(title = "Total Medicaid Enrollment by State",
x = "Year",
y = "Total Medicaid Enrollees") +
theme_pub()
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker/mco_tracker.R')
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker/mco_tracker.R')
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker/mco_tracker.R')
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker/mco_tracker.R')
saveRDS(gt, file = paste0(path, "/full_table_with_proportions.rds"))
d <- readRDS(paste0(path, "/full_table_with_proportions.rds"))
# Remove US and Puerto Rico stats
d <- d %>%
filter(!state %in% c("United States", "Puerto Rico")) %>%
filter(!year %in% 2003:2007)
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker/mco_tracker.R')
d <- readRDS("full_table_with_proportions.rds")
getwd()
setwd("D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker")
d <- readRDS("full_table_with_proportions.rds")
View(d)
runApp('mco_tracker.R')
View(d)
959590 + 3494439 + 69809
getwd()
setwd(file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp"))
View(d)
pdf_path <- file.path(getwd(), "Input_Data",
"Medicaid_managedcare_enrollment_report",
"2013 Medicaid Report.pdf")
pages <- pdf_text(pdf_path)[c(9, 10)]
list_data <- lapply(pages, pdf_to_list)
#' Converts pdf to list
#' @param text page of text as a string
#' @return list with each line as its own sublist
pdf_to_list <- function(text) {
# Split the string into lines
lines <- strsplit(text, "\n")[[1]]
# Process each line
list_data <- lapply(lines, function(line) {
# Split the cleaned line by 2 or more spaces or tabs
columns <- strsplit(line, "\\s{2,}|\t")[[1]]
return(columns)
})
return(list_data)
}
#' Shifts columns to match the PDF table structure
#' @param data text data organized as line by line text in a list
#' @return dataframe with values in the correct place
shift_columns <- function(data) {
shifted_data <- lapply(data, function(row) {
if (nchar(row[2]) == 1 & row[2] %in% as.character(0:9)) {
row[2] <- row[3]
row[3:length(row) - 1] <- row[4:length(row)]
row[length(row)] <- ""
}
return(row)
})
shifted_df <- as.data.frame(do.call(rbind, shifted_data), stringsAsFactors = F)
return(shifted_df)
}
pdf_path <- file.path(getwd(), "Input_Data",
"Medicaid_managedcare_enrollment_report",
"2013 Medicaid Report.pdf")
pages <- pdf_text(pdf_path)[c(9, 10)]
library(pdftools)
pages <- pdf_text(pdf_path)[c(9, 10)]
list_data <- lapply(pages, pdf_to_list)
df <- as.data.frame(do.call(rbind, list_data[[1]]))
df2 <- as.data.frame(do.call(rbind, list_data[[2]]))
df <- df[-c(1:4, 47), ]
df2 <- df2[-c(1:4, 19:26), ]
df3 <- rbind(df, df2)
View(df3)
names(df3) <- c("state", "total_med_enr","comp_mco", "pccm", "mltss",
"bho", "dental", "transportation", "pace", "other")
# Replace '--' and 'n/a' with NA
df3[df3 == "--" | df3 == "n/a"] <- NA
# Convert character numbers to numeric for all columns
df3[-1] <- lapply(df3[-1], function(x) as.numeric(gsub(",", "", x)))
write_csv(df3, file = paste0(save_path, "/data_2013.csv"))
save_path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report",
"by_program_pop_from_report")
write_csv(df3, file = paste0(save_path, "/data_2013.csv"))
#' Joins Medicaid total enrollment to bigger list of dataframes and
#' calculates the proportion of comprehensive risk-based MMC enrollees
#' at state level
#' @param data_list list of dataframes that contains MCO enrollment
#'                  numbers
#' @param df annual dataframe that contains denominator scraped from MMC
#'           enrollment report
#' @param year input for target year
#' @return updated sublist for desired year
join_and_fill <- function(data_list, df, year) {
# Select just state and total state Medicaid enrollment
df <- df %>%
select(state, total_med_enr) %>%
mutate(total_med_enr = as.numeric(total_med_enr))
# Join denominator to sublist
data_list[[year]] <- left_join(data_list[[year]], df, by = "state")
# Calculate proportion of CRB MMC enrollees per state
data_list[[year]] <- data_list[[year]] %>%
mutate(med_enr_pct = crb_mc_enrollees / total_med_enr)
return(data_list[[year]])
}
# Define years
years <- 2016:2021
# Get all file names with the years attached
file_names <- paste0("raw_data_", years, ".csv")
# Apply read_csv to the file names
data_split <- lapply(file_names, read_csv)
# Get all file names with the years attached
file_names <- paste0("raw_data_", years, ".csv")
file_names
setwd(file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report", "raw_comp_mco_data"))
# Define years
years <- setdiff(2003:2015, 2012)
# Get all file names with the years attached
file_names <- paste0("raw_data_", years, ".csv")
# Apply read_csv to the file names
data_list <- lapply(file_names, read_csv)
# Assign years as names of sublists
names(data_list) <- years
# Shorten name of object within sublist
new_name <- "total_mmc_enr"
data_list <- lapply(years, function(year) {
sublist <- data_list[[as.character(year)]]
names(sublist) <- new_name
return(sublist)
})
names(data_list) <- years
# All data is stored in one single column and all elements are separated
# by commas
data_split <- lapply(data_list, function(data) {
data.frame(do.call('rbind', strsplit(as.character(data$total_mmc_enr),
',',
fixed = TRUE)))
})
for (year in names(data_split)) {
# Add variable for year
data_split[[year]]$year <- as.numeric(year)
# Omit unneeded rows
data_split[[year]] <- data_split[[year]][-c(1:2,
56:nrow(data_split[[year]])), ]
}
# Unlist and rowbind
data_comb <- do.call(rbind, data_split)
# Omit duplicate column for state name
data_comb <- data_comb[, -4]
# Reassign variable names
names(data_comb) <- c("state",
"crb_mc_enrollees",
"med_enr_pct",
"year")
# Replace all instances of "N/A" as NA
data_comb[data_comb == "N/A"] <- NA
View(data_comb)
# Define years
years <- 2016:2021
# Get all file names with the years attached
file_names <- paste0("raw_data_", years, ".csv")
# Apply read_csv to the file names
data_split <- lapply(file_names, read_csv)
# Assign years as names of sublists
names(data_split) <- years
for (year in names(data_split)) {
# Add variable for year
data_split[[year]]$year <- as.numeric(year)
# Omit unneeded rows
data_split[[year]] <- data_split[[year]][-c(1:3,
56:nrow(data_split[[year]])), ]
}
data_table <- do.call(rbind, data_split)
data_table <- data_table[, -4]
# Reassign variable names
names(data_table) <- c("state",
"crb_mc_enrollees",
"med_enr_pct",
"year")
# Replace all instances of "N/A" as NA
data_table[data_table == "N/A"] <- NA
# Combine 2003-2015 and 2016-2021 tables
full_data_table <- rbind(data_comb, data_table)
full_data_table$crb_mc_enrollees <- as.numeric(full_data_table$crb_mc_enrollees)
full_data_table$med_enr_pct <- as.numeric(full_data_table$med_enr_pct)
path <- file.path("D:", "Groups", "YSPH-HPM-Ndumele", "Networks", "Dohyun",
"medicaid_privatization_exp", "Input_Data",
"Medicaid_managedcare_enrollment_report",
"by_program_pop_from_report")
# Group each year as its own sublist for easier joining
grouped_table <- full_data_table %>%
group_by(year) %>%
group_split() %>%
lapply(as.data.frame)
# Name lists as the year
names(grouped_table) <- setdiff(2003:2021, 2012)
# Define years
years <- setdiff(2008:2015, 2012)
# Get all file names with the years attached
file_names <- paste0(path, "/data_", years, ".csv")
file_names
# Apply read_csv to the file names
files_list <- lapply(file_names, read_csv)
names(files_list) <- years
# Apply joining and filling function to all sublists
grouped_table[as.character(years)] <- lapply(years, function(year) {
join_and_fill(grouped_table,
files_list[[as.character(year)]],
as.character(year))
})
gt <- bind_rows(grouped_table)
View(gt)
saveRDS(gt, file = paste0(path, "/full_table_with_proportions.rds"))
# Fill in missing total Medicaid enrollees 2016-2021 (Not in KFF raw data)
gt <- gt %>%
mutate(total_med_enr = ifelse(is.na(total_med_enr),
crb_mc_enrollees / med_enr_pct,
total_med_enr))
View(gt)
saveRDS(gt, file = paste0(path, "/full_table_with_proportions.rds"))
path
runApp('D:/Groups/YSPH-HPM-Ndumele/Networks/Dohyun/medicaid_privatization_exp/mco_tracker/mco_tracker.R')
